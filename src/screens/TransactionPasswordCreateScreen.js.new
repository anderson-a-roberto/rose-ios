import React, { useState, useRef, useEffect } from 'react';
import { View, StyleSheet, TouchableOpacity, Keyboard, Alert, Platform, TextInput, KeyboardAvoidingView, ScrollView } from 'react-native';
import { Text } from 'react-native-paper';
import { SafeAreaView } from 'react-native-safe-area-context';
import { useNavigation } from '@react-navigation/native';
import MaterialCommunityIcons from '@expo/vector-icons/MaterialCommunityIcons';
import { useTransactionPassword } from '../contexts/TransactionPasswordContext';

export default function TransactionPasswordCreateScreen() {
  const navigation = useNavigation();
  const { setTransactionPassword, isVerifying, error } = useTransactionPassword();
  const [password, setPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [isValid, setIsValid] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const passwordInputRef = useRef(null);
  
  // Validações da senha
  const hasMinLength = password.length === 6;
  const hasFourDifferentDigits = new Set(password.split('')).size >= 4;
  const hasNoSequence = !/(123|321|111|222|333|444|555|666|777|888|999|000)/.test(password);
  
  useEffect(() => {
    setIsValid(hasMinLength && hasFourDifferentDigits && hasNoSequence);
  }, [password, hasMinLength, hasFourDifferentDigits, hasNoSequence]);
  
  // Focar no input quando a tela é montada
  useEffect(() => {
    if (passwordInputRef.current) {
      setTimeout(() => {
        passwordInputRef.current.focus();
      }, 500);
    }
  }, []);

  const handleBack = () => {
    navigation.goBack();
  };

  const handleContinue = async () => {
    if (isValid && !isSubmitting) {
      try {
        setIsSubmitting(true);
        console.log('[PIN] Salvando PIN...');
        
        const success = await setTransactionPassword(password);
        
        if (success) {
          console.log('[PIN] PIN salvo com sucesso');
          // Navegar diretamente para o Dashboard
          navigation.navigate('Dashboard2');
        } else {
          Alert.alert(
            'Erro',
            error || 'Não foi possível salvar o PIN. Tente novamente.',
            [{ text: 'OK' }]
          );
        }
      } catch (err) {
        console.error('[PIN] Erro ao salvar PIN:', err);
        Alert.alert(
          'Erro',
          'Ocorreu um erro ao salvar o PIN. Tente novamente.',
          [{ text: 'OK' }]
        );
      } finally {
        setIsSubmitting(false);
      }
    }
  };

  const handlePasswordChange = (value) => {
    // Aceitar apenas dígitos e limitar a 6 caracteres
    const numericValue = value.replace(/[^0-9]/g, '');
    if (numericValue.length <= 6) {
      setPassword(numericValue);
    }
  };

  const renderPasswordDots = () => {
    const dots = [];
    for (let i = 0; i < 6; i++) {
      dots.push(
        <View 
          key={i} 
          style={[
            styles.passwordDot,
            i < password.length && styles.passwordDotFilled
          ]}
        >
          {(showPassword && i < password.length) ? (
            <Text style={styles.passwordText}>{password[i]}</Text>
          ) : null}
        </View>
      );
    }
    return dots;
  };

  return (
    <SafeAreaView style={styles.container} edges={['top']}>
      {/* Header */}
      <View style={styles.header}>
        <View style={styles.headerTop}>
          <TouchableOpacity
            style={styles.backButton}
            onPress={handleBack}
          >
            <Text style={styles.backText}>‹</Text>
          </TouchableOpacity>
        </View>
        <View style={styles.headerContent}>
          <Text style={styles.headerTitle}>Senha de transação</Text>
          <Text style={styles.subtitle}>
            Crie uma senha para autorizar suas transações no aplicativo
          </Text>
        </View>
      </View>

      <KeyboardAvoidingView 
        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
        style={styles.keyboardAvoidingContainer}
        keyboardVerticalOffset={Platform.OS === 'ios' ? 0 : 20}
      >
        <View style={styles.mainContainer}>
          <ScrollView 
            style={styles.scrollView}
            contentContainerStyle={styles.scrollContent}
            keyboardShouldPersistTaps="handled"
            showsVerticalScrollIndicator={false}
          >
            <View style={styles.content}>
              <View style={styles.lockIconContainer}>
                <MaterialCommunityIcons name="lock" size={40} color="#682145" />
              </View>
              
              <Text style={styles.title}>Crie a senha de transação</Text>
              
              <View style={styles.passwordContainer}>
                {renderPasswordDots()}
                <TouchableOpacity 
                  style={styles.eyeIcon}
                  onPress={() => setShowPassword(!showPassword)}
                >
                  <MaterialCommunityIcons 
                    name={showPassword ? "eye-off" : "eye"} 
                    size={24} 
                    color="#666666" 
                  />
                </TouchableOpacity>
              </View>
              
              {/* Input invisível para capturar entrada do teclado */}
              <TextInput
                ref={passwordInputRef}
                value={password}
                onChangeText={handlePasswordChange}
                style={styles.hiddenInput}
                keyboardType="numeric"
                maxLength={6}
                secureTextEntry={!showPassword}
                caretHidden={true}
              />
              
              <View style={styles.instructionsContainer}>
                <Text style={[styles.instructionText, hasMinLength ? styles.validText : styles.normalText]}>
                  Crie uma senha com 6 dígitos
                </Text>
                <Text style={[styles.instructionText, hasFourDifferentDigits ? styles.validText : styles.normalText]}>
                  Utilize quatro números diferentes
                </Text>
                <Text style={[styles.instructionText, hasNoSequence ? styles.validText : styles.normalText]}>
                  Não utilize sequências (ex: 123, 321, 111)
                </Text>
                <Text style={styles.instructionText}>
                  Não utilizar dados pessoais
                </Text>
              </View>
              
              <View style={styles.bottomPadding} />
            </View>
          </ScrollView>

          <View style={styles.buttonContainer}>
            <TouchableOpacity
              style={[
                styles.continueButton,
                !isValid && styles.continueButtonDisabled
              ]}
              onPress={handleContinue}
              disabled={!isValid || isSubmitting}
            >
              <Text style={styles.continueButtonText}>{isSubmitting ? 'PROCESSANDO...' : 'CONTINUAR'}</Text>
            </TouchableOpacity>
          </View>
        </View>
      </KeyboardAvoidingView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#FFFFFF',
  },
  keyboardAvoidingContainer: {
    flex: 1,
    backgroundColor: '#FFF',
  },
  mainContainer: {
    flex: 1,
    display: 'flex',
    flexDirection: 'column',
    backgroundColor: '#FFF',
  },
  scrollView: {
    flex: 1,
    backgroundColor: '#FFF',
  },
  scrollContent: {
    paddingBottom: 24,
  },
  hiddenInput: {
    position: 'absolute',
    opacity: 0,
    height: 0,
    width: 0,
  },
  bottomPadding: {
    height: 100,
  },
  header: {
    paddingTop: Platform.OS === 'ios' ? 8 : 16,
    paddingBottom: 24,
    backgroundColor: '#FFF',
    borderBottomWidth: 1,
    borderBottomColor: '#F5F5F5',
    zIndex: 10,
  },
  headerTop: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 16,
    marginBottom: 24,
  },
  headerContent: {
    paddingHorizontal: 24,
  },
  backButton: {
    width: 40,
    height: 40,
    justifyContent: 'center',
    alignItems: 'flex-start',
  },
  backText: {
    fontSize: 32,
    color: '#E91E63',
    marginTop: -4,
  },
  headerTitle: {
    fontSize: 20,
    fontWeight: '600',
    color: '#000',
    marginBottom: 8,
  },
  subtitle: {
    fontSize: 16,
    color: '#666666',
    lineHeight: 24,
  },
  content: {
    padding: 24,
    alignItems: 'center',
  },
  lockIconContainer: {
    width: 80,
    height: 80,
    borderRadius: 40,
    backgroundColor: 'rgba(104, 33, 69, 0.1)',
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: 24,
  },
  title: {
    fontSize: 20,
    fontWeight: '600',
    color: '#000',
    marginBottom: 32,
    textAlign: 'center',
  },
  passwordContainer: {
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: 24,
    position: 'relative',
    width: '100%',
  },
  passwordDot: {
    width: 16,
    height: 16,
    borderRadius: 8,
    backgroundColor: 'transparent',
    borderWidth: 1,
    borderColor: '#666666',
    marginHorizontal: 8,
    justifyContent: 'center',
    alignItems: 'center',
  },
  passwordDotFilled: {
    backgroundColor: '#682145',
    borderColor: '#682145',
  },
  passwordText: {
    color: '#FFFFFF',
    fontSize: 12,
    fontWeight: 'bold',
  },
  eyeIcon: {
    position: 'absolute',
    right: 0,
    padding: 8,
  },
  instructionsContainer: {
    width: '100%',
    marginTop: 16,
  },
  instructionText: {
    fontSize: 14,
    color: '#000000',
    marginBottom: 8,
    fontWeight: '500',
  },
  validText: {
    color: '#000000',
    fontWeight: 'bold',
  },
  normalText: {
    color: '#000000',
    fontWeight: '500',
  },
  buttonContainer: {
    padding: 16,
    paddingBottom: Platform.OS === 'ios' ? 32 : 16,
    backgroundColor: '#FFF',
    borderTopWidth: 1,
    borderTopColor: '#F5F5F5',
    ...Platform.select({
      android: {
        elevation: 8,
      },
      ios: {
        shadowColor: '#000',
        shadowOffset: { width: 0, height: -2 },
        shadowOpacity: 0.1,
        shadowRadius: 4,
      },
    }),
  },
  continueButton: {
    backgroundColor: '#E91E63',
    height: 48,
    borderRadius: 8,
    justifyContent: 'center',
    alignItems: 'center',
  },
  continueButtonDisabled: {
    backgroundColor: '#CCCCCC',
  },
  continueButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '500',
    textTransform: 'uppercase',
  },
});
