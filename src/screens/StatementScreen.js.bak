import React, { useState, useEffect } from 'react';
import { 
  View, 
  StyleSheet, 
  TouchableOpacity, 
  ScrollView, 
  ActivityIndicator,
  Platform,
  StatusBar,
  Modal
} from 'react-native';
import { 
  Text, 
  Button 
} from 'react-native-paper';
import MaterialCommunityIcons from '@expo/vector-icons/MaterialCommunityIcons';
import { useNavigation } from '@react-navigation/native';
import { useTransactionsQuery } from '../hooks/useTransactionsQuery';
import useDashboard from '../hooks/useDashboard';
import StatementTableRow from '../components/extrato/StatementTableRow';
import ReceiptModal from '../components/extrato/receipts/ReceiptModal';
import { SafeAreaView } from 'react-native-safe-area-context';
import DateTimePicker from '@react-native-community/datetimepicker';
import { supabase } from '../config/supabase';
import { normalize, FontSizes, Spacing } from '../utils/scaling';

export default function StatementScreen({ route }) {
  const navigation = useNavigation();
  const { userAccount, userTaxId } = useDashboard();
  const { balance } = route.params;
  const [showBalance, setShowBalance] = useState(true);
  const [startDate, setStartDate] = useState(() => {
    // Data de hoje menos 6 dias (para ter 7 dias no total)
    const date = new Date();
    date.setDate(date.getDate() - 6);
    return date;
  });
  const [endDate, setEndDate] = useState(new Date());
  const [showStartPicker, setShowStartPicker] = useState(false);
  const [showEndPicker, setShowEndPicker] = useState(false);
  const [selectedTransaction, setSelectedTransaction] = useState(null);
  const [modalVisible, setModalVisible] = useState(false);
  const [searchDates, setSearchDates] = useState({
    dateFrom: (() => {
      const date = new Date();
      date.setDate(date.getDate() - 6);
      return date.toISOString().split('T')[0];
    })(),
    dateTo: new Date().toISOString().split('T')[0]
  });
  const [refreshing, setRefreshing] = useState(false);

  const { 
    data, 
    isLoading: loading, 
    error, 
    refetch: refetchTransactions 
  } = useTransactionsQuery(
    userAccount, 
    userTaxId,
    searchDates.dateFrom,
    searchDates.dateTo
  );

  // Extrair as transações do objeto data
  const transactions = data?.data || [];

  const onStartDateChange = (event, selectedDate) => {
    setShowStartPicker(Platform.OS === 'ios');
    if (selectedDate) {
      // Calcula a data máxima permitida (6 dias após a data selecionada = 7 dias total)
      const maxEndDate = new Date(selectedDate);
      maxEndDate.setDate(maxEndDate.getDate() + 6);

      // Se a data final atual estiver mais que 6 dias depois da nova data inicial
      if (endDate > maxEndDate) {
        setEndDate(maxEndDate);
        alert('Período máximo de 7 dias');
      }

      // Se a data final for menor que a nova data inicial
      if (endDate < selectedDate) {
        setEndDate(selectedDate);
      }

      setStartDate(selectedDate);
    }
  };

  const onEndDateChange = (event, selectedDate) => {
    setShowEndPicker(Platform.OS === 'ios');
    if (selectedDate) {
      // Calcula a data mínima permitida (6 dias antes da data selecionada = 7 dias total)
      const minStartDate = new Date(selectedDate);
      minStartDate.setDate(minStartDate.getDate() - 6);

      // Se a data inicial estiver mais que 6 dias antes da nova data final
      if (startDate < minStartDate) {
        setStartDate(minStartDate);
        alert('Período máximo de 7 dias');
      }

      // Se a data inicial for maior que a nova data final
      if (startDate > selectedDate) {
        setStartDate(selectedDate);
      }

      setEndDate(selectedDate);
    }
  };

  const handleSubmit = () => {
    try {
      // Calcula a diferença em dias (incluindo o dia inicial = +1)
      const diffTime = Math.abs(endDate - startDate);
      const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24)) + 1;

      if (diffDays > 7) {
        alert('Período máximo de 7 dias');
        return;
      }

      if (endDate < startDate) {
        alert('A data final não pode ser menor que a data inicial');
        return;
      }

      setSearchDates({
        dateFrom: startDate.toISOString().split('T')[0],
        dateTo: endDate.toISOString().split('T')[0]
      });
    } catch (err) {
      console.error('Erro ao processar datas:', err);
      alert('Erro ao processar as datas. Verifique o formato.');
    }
  };

  const handleTransactionPress = (transaction) => {
    setSelectedTransaction(transaction);
    setModalVisible(true);
  };

  const formatValue = (value) => {
    return new Intl.NumberFormat('pt-BR', {
      style: 'currency',
      currency: 'BRL'
    }).format(value);
  };

  const formatDateForDisplay = (date) => {
    return date.toLocaleDateString('pt-BR', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric'
    });
  };

  const toggleBalance = () => setShowBalance(!showBalance);

  return (
    <SafeAreaView style={styles.container}>
      <StatusBar barStyle="light-content" backgroundColor="#682145" />
      {/* Card do Topo */}
      <View style={styles.topCard}>
        {/* Header */}
        <View style={styles.header}>
          <TouchableOpacity
            style={styles.backButton}
            onPress={() => navigation.navigate('Dashboard2')}
          >
            <MaterialCommunityIcons name="arrow-left" size={20} color="white" />
          </TouchableOpacity>
          <Text style={styles.headerTitle}>Extrato</Text>
          <View style={{ width: 40 }} />
        </View>

        {/* Card de Saldo */}
        <View style={styles.balanceCard}>
          <Text style={styles.balanceLabel}>SALDO DISPONÍVEL</Text>
          <View style={styles.balanceRow}>
            {showBalance ? (
              <Text style={styles.balanceValue}>
                {formatValue(balance)}
              </Text>
            ) : (
              <View style={styles.hiddenBalanceContainer}>
                {[...Array(5)].map((_, index) => (
                  <View key={index} style={styles.hiddenBalanceDot} />
                ))}
              </View>
            )}
            <TouchableOpacity onPress={toggleBalance}>
              <MaterialCommunityIcons 
                name={showBalance ? "eye" : "eye-off"} 
                size={20} 
                color="white" 
              />
            </TouchableOpacity>
          </View>
        </View>

        {/* Filtros */}
        <View style={styles.filterContainer}>
          <View style={styles.dateInputsRow}>
            <View style={styles.datePickerContainer}>
              <Text style={styles.dateLabel}>Data Inicial</Text>
              <TouchableOpacity 
                style={styles.dateButton}
                onPress={() => setShowStartPicker(true)}
              >
                <Text style={styles.dateButtonText}>
                  {formatDateForDisplay(startDate)}
                </Text>
              </TouchableOpacity>
            </View>
            <View style={styles.datePickerContainer}>
              <Text style={styles.dateLabel}>Data Final</Text>
              <TouchableOpacity 
                style={styles.dateButton}
                onPress={() => setShowEndPicker(true)}
              >
                <Text style={styles.dateButtonText}>
                  {formatDateForDisplay(endDate)}
                </Text>
              </TouchableOpacity>
            </View>
          </View>
          <Button
            mode="contained"
            onPress={handleSubmit}
            style={styles.filterButton}
            buttonColor="#e92176"
            labelStyle={styles.filterButtonLabel}
          >
            Filtrar
          </Button>
        </View>
      </View>

      {/* Lista de Transações */}
      <ScrollView 
        style={styles.transactionsContainer} 
        refreshControl={
          <RefreshControl 
            refreshing={refreshing} 
            onRefresh={() => {
              setRefreshing(true);
              refetchTransactions().then(() => setRefreshing(false));
            }} 
          />
        }
      >
        {loading ? (
          <ActivityIndicator size="large" color="#E91E63" style={styles.loader} />
        ) : error ? (
          <View style={styles.errorContainer}>
            <MaterialCommunityIcons 
              name="alert-circle-outline" 
              size={48} 
              color="#E91E63" 
            />
            <Text style={styles.errorTitle}>Erro ao carregar transações</Text>
            <Text style={styles.errorMessage}>
              {error.message || "Ocorreu um erro ao buscar suas transações. Tente novamente mais tarde."}
            </Text>
            <TouchableOpacity 
              style={styles.retryButton}
              onPress={() => refetchTransactions()}
            >
              <Text style={styles.retryButtonText}>Tentar novamente</Text>
            </TouchableOpacity>
          </View>
        ) : transactions.length === 0 ? (
          <View style={styles.emptyContainer}>
            <MaterialCommunityIcons 
              name="calendar-blank" 
              size={48} 
              color="#E91E63" 
            />
            <Text style={styles.emptyText}>
              Nenhuma transação encontrada no período selecionado
            </Text>
          </View>
        ) : (
          transactions
            .sort((a, b) => new Date(b.createDate) - new Date(a.createDate))
            .map((transaction, index) => (
            <StatementTableRow
              key={index}
              transaction={transaction}
              onPress={() => handleTransactionPress(transaction)}
            />
          ))
        )}
      </ScrollView>

      {/* DatePicker para Android */}
      {Platform.OS === 'android' && showStartPicker && (
        <DateTimePicker
          value={startDate}
          mode="date"
          display="default"
          onChange={onStartDateChange}
          maximumDate={new Date()}
        />
      )}

      {Platform.OS === 'android' && showEndPicker && (
        <DateTimePicker
          value={endDate}
          mode="date"
          display="default"
          onChange={onEndDateChange}
          maximumDate={new Date()}
        />
      )}
      
      {/* Modal para DatePicker no iOS */}
      <Modal
        visible={Platform.OS === 'ios' && (showStartPicker || showEndPicker)}
        transparent={true}
        animationType="slide"
      >
        <View style={styles.modalContainer}>
          <View style={styles.datePickerContainer}>
            <View style={styles.datePickerHeader}>
              <TouchableOpacity 
                onPress={() => {
                  setShowStartPicker(false);
                  setShowEndPicker(false);
                }}
                style={styles.datePickerCancelButton}
              >
                <Text style={styles.datePickerButtonText}>Cancelar</Text>
              </TouchableOpacity>
              
              <TouchableOpacity 
                onPress={() => {
                  if (showStartPicker) {
                    onStartDateChange(null, startDate);
                  } else if (showEndPicker) {
                    onEndDateChange(null, endDate);
                  }
                  setShowStartPicker(false);
                  setShowEndPicker(false);
                }}
                style={styles.datePickerDoneButton}
              >
                <Text style={[styles.datePickerButtonText, { color: '#E91E63' }]}>Confirmar</Text>
              </TouchableOpacity>
            </View>
            
            {showStartPicker && (
              <DateTimePicker
                value={startDate}
                mode="date"
                display="spinner"
                onChange={(event, date) => {
                  if (date) setStartDate(date);
                }}
                maximumDate={new Date()}
                style={styles.datePickerIOS}
              />
            )}
            
            {showEndPicker && (
              <DateTimePicker
                value={endDate}
                mode="date"
                display="spinner"
                onChange={(event, date) => {
                  if (date) setEndDate(date);
                }}
                maximumDate={new Date()}
                style={styles.datePickerIOS}
              />
            )}
          </View>
        </View>
      </Modal>

      <ReceiptModal
        visible={modalVisible}
        onDismiss={() => setModalVisible(false)}
        transaction={selectedTransaction}
      />
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: 'white',
  },
  topCard: {
    backgroundColor: '#682145',
    borderBottomLeftRadius: 20,
    borderBottomRightRadius: 20,
    paddingBottom: 16,
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: normalize(8),
    paddingTop: normalize(16),
    paddingBottom: normalize(24),
  },
  headerTitle: {
    fontSize: normalize(20),
    fontWeight: 'bold',
    color: 'white',
    textAlign: 'center',
  },
  backButton: {
    width: 40,
    height: 40,
    justifyContent: 'center',
    alignItems: 'center',
  },
  balanceCard: {
    backgroundColor: '#682145',
    paddingHorizontal: 24,
    paddingVertical: 16,
    marginBottom: 24,
  },
  balanceLabel: {
    color: 'white',
    fontSize: normalize(12),
    marginBottom: normalize(4),
    opacity: 0.8,
  },
  balanceRow: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
  },
  balanceValue: {
    color: 'white',
    fontSize: normalize(32),
    fontWeight: 'bold',
  },
  hiddenBalanceContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 8,
    height: 48,
    justifyContent: 'flex-start',
  },
  hiddenBalanceDot: {
    width: normalize(8),
    height: normalize(8),
    borderRadius: normalize(4),
    backgroundColor: 'white',
  },
  filterContainer: {
    paddingHorizontal: 16,
  },
  dateInputsRow: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 8,
  },
  datePickerContainer: {
    flex: 1,
    marginHorizontal: 8,
  },
  dateLabel: {
    color: 'white',
    marginBottom: 4,
    fontSize: 12,
  },
  dateButton: {
    height: 40,
    backgroundColor: '#682145',
    borderRadius: 25,
    borderWidth: 1,
    borderColor: '#e92176',
    justifyContent: 'center',
    paddingHorizontal: 16,
  },
  dateButtonText: {
    color: 'white',
    fontSize: 14,
    textAlign: 'center',
  },
  filterButton: {
    height: 48,
    justifyContent: 'center',
    borderRadius: 25,
    backgroundColor: '#e92176',
    width: '100%',
    marginTop: 16,
    marginBottom: 8,
  },
  filterButtonLabel: {
    fontSize: 16,
    fontWeight: '600',
    color: 'white',
    textTransform: 'uppercase',
  },
  transactionsContainer: {
    flex: 1,
    backgroundColor: 'white',
  },
  centerContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  errorContainer: {
    alignItems: 'center',
    justifyContent: 'center',
    padding: 20,
    backgroundColor: '#FFF',
    borderRadius: 8,
    margin: 16,
  },
  errorTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#666',
    marginBottom: 8,
  },
  errorMessage: {
    fontSize: 16,
    color: '#666',
    marginBottom: 16,
  },
  retryButton: {
    backgroundColor: '#E91E63',
    paddingHorizontal: 24,
    paddingVertical: 12,
    borderRadius: 8,
    elevation: 2,
  },
  retryButtonText: {
    color: '#FFF',
    fontSize: 16,
    fontWeight: '600',
  },
  loader: {
    marginVertical: 20,
  },
  emptyContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  emptyText: {
    textAlign: 'center',
    color: '#666',
    marginVertical: 20,
  },
  transactionsList: {
    paddingVertical: 16,
  },
  datePickerIOS: {
    width: '100%',
    height: 200,
  },
  modalContainer: {
    flex: 1,
    justifyContent: 'flex-end',
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
  },
  datePickerContainer: {
    backgroundColor: 'white',
    borderTopLeftRadius: 10,
    borderTopRightRadius: 10,
    paddingBottom: 20,
  },
  datePickerHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 16,
    borderBottomWidth: 1,
    borderBottomColor: '#e0e0e0',
  },
  datePickerCancelButton: {
    padding: 4,
  },
  datePickerDoneButton: {
    padding: 4,
  },
  datePickerButtonText: {
    fontSize: 16,
    fontWeight: '500',
  },
});
